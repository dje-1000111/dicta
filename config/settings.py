"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0.2/ref/settings/
"""

import os
import sentry_sdk

sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    # integrations=[DjangoIntegration()],
    # enable_tracing=True,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)

from pathlib import Path
import psycopg2.extensions
from dotenv import load_dotenv, find_dotenv  # type: ignore

load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

if DEBUG:
    ALLOWED_HOSTS = []
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS").split()
    CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS").split()
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.getenv("DJANGO_EMAIL_HOST")
    EMAIL_PORT = os.getenv("DJANGO_EMAIL_PORT")
    EMAIL_USE_TLS = os.getenv("DJANGO_EMAIL_USE_TLS")
    EMAIL_HOST_USER = os.getenv("DJANGO_EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.getenv("DJANGO_EMAIL_HOST_PASSWORD")
    DOMAIN = os.getenv("DJANGO_DOMAIN")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "compressor",
    "apps.dictation",
    "apps.dictation_auth",
    "apps.dictation.templatetags.extra_filters",
    "apps.dictation.templatetags.adjusted_elided_page",
    "raven.contrib.django.raven_compat",
    "django.contrib.sitemaps",
]

MIDDLEWARE = [
    "csp.middleware.CSPMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWD"),
        "PORT": os.getenv("DB_PORT"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
        "TEST": {
            "NAME": "dictation_test_database",
        },
        "OPTIONS": {
            "isolation_level": psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,
        },
    }
}

# if not DEBUG:
#     DATABASES["default"].update({"HOST": os.getenv("DB_HOST")})


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "apps.dictation_auth.authenticate.EmailModelBackend",
    "django.contrib.auth.backends.ModelBackend",
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = os.getenv("STATIC_ROOT")

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Core Settings
# https://docs.djangoproject.com/en/5.0/ref/settings/
X_FRAME_OPTIONS = "SAMEORIGIN"

SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_SECONDS = 31536000
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True

SESSION_COOKIE_NAME = "__Secure-sessionid"
CSRF_COOKIE_NAME = "__Secure-csrftoken"

# Content Security Policy
# https://django-csp.readthedocs.io/en/latest/

CSP_DEFAULT_SRC = (
    "'self'",
    "region1.google-analytics.com/",
    "https://www.googletagmanager.com/",
    "https://www.googletagmanager.com/gtm.js",
    "https://www.googletagmanager.com/gtag/js",
)
CSP_BASE_URI = ("'self'",)
CSP_STYLE_SRC = (
    "'self'",
    "cdn.jsdelivr.net/",
    "cdnjs.cloudflare.com/",
    "fonts.googleapis.com/",
    "https://www.googletagmanager.com/",
)

CSP_FONT_SRC = (
    "'self'",
    "https://fonts.gstatic.com/",
    "https://fonts.googleapis.com/",
    "https://cdnjs.cloudflare.com/",
)

CSP_SCRIPT_SRC = (
    "'self'",
    "https://www.youtube.com/",
    "cdn.jsdelivr.net/",
    "cdnjs.cloudflare.com/",
    "region1.google-analytics.com/",
    "https://www.googletagmanager.com/",
    "https://www.googletagmanager.com/gtm.js",
    "https://www.googletagmanager.com/gtag/js",
)
CSP_INCLUDE_NONCE_IN = ["script-src"]
CSP_IMG_SRC = (
    "'self'",
    "img.youtube.com",
    "i.ytimg.com/",
    "region1.google-analytics.com/",
    "www.googletagmanager.com",
    "data:",
)
CSP_MEDIA_SRC = ("'self'", "https://www.youtube.com/")
CSP_FRAME_SRC = (
    "'self'",
    "https://www.youtube-nocookie.com/",
    "https://www.youtube.com/embed/",
    "https://www.youtube.com/iframe_api",
    "https://www.googletagmanager.com/",
    "https://googleads.g.doubleclick.net/",
)
CSP_OBJECT_SRC = ("'none'",)
CSP_FRAME_ANCESTORS = "'self'"
# CSP_REQUIRE_TRUSTED_TYPES_FOR = ("'script'",)


LOGIN_URL = "/auth/accounts/login"

# Custom user
AUTH_USER_MODEL = "dictation_auth.User"

# Redirect to profile URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = "registration/profile.html"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STATIC_DIR = Path("static")
TXT_DIR = STATIC_DIR / "txt"
IMG_DIR = STATIC_DIR / "img"

PONCTUATION = [
    ".",
    ",",
    ":",
    "!",
    "?",
    ";",
    " - ",
    '"',
    "<",
    ">",
    "/",
    "#",
    "@",
    "$",
    "£",
    "*",
    "¤",
    "|",
    "`",
]

RAVEN_CONFIG = {
    "dsn": os.getenv("SENTRY_DSN"),
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    # 'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "level": "INFO",
        "handlers": ["sentry"],
    },
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        },
    },
    "handlers": {
        "sentry": {
            "level": "INFO",
            "class": "raven.contrib.django.raven_compat.handlers.SentryHandler",
            "tags": {"custom-tag": "x"},
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django.db.backends": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        "raven": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": False,
        },
        "sentry.errors": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

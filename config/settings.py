"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0.4/ref/settings/
"""

import os
from pathlib import Path

# from csp.constants import SELF, NONE, NONCE
import psycopg2.extensions
from dotenv import load_dotenv, find_dotenv  # type: ignore
import django

load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
RECAPTCHA_PUBLIC_KEY = os.getenv("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = os.getenv("RECAPTCHA_PRIVATE_KEY")
SILENCED_SYSTEM_CHECKS = ["django_recaptcha.recaptcha_test_key_error"]
RECAPTCHA_REQUIRED_SCORE = 0.85
DOMAIN_NAME = os.getenv("DJANGO_DOMAIN_NAME")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEBUG_PROPAGATE_EXCEPTIONS = True
CSRF_FAILURE_VIEW = "apps.dictation.views.csrf_failure"

if DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost",
        "http://127.0.0.1",
        "http://127.0.0.1:8000",
    ]
    ALLOWED_HOSTS = []
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

else:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS").split()
    CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS").split()
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.getenv("DJANGO_EMAIL_HOST")
    EMAIL_PORT = os.getenv("DJANGO_EMAIL_PORT")
    EMAIL_USE_TLS = os.getenv("DJANGO_EMAIL_USE_TLS")
    EMAIL_HOST_USER = os.getenv("DJANGO_EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.getenv("DJANGO_EMAIL_HOST_PASSWORD")
    DOMAIN = os.getenv("DJANGO_DOMAIN")

# Application definition

INSTALLED_APPS = [
    "apps.dictation.templatetags.adjusted_elided_page",
    "apps.dictation",
    "apps.dictation_auth",
    "apps.dictation.templatetags.extra_filters",
    "compressor",
    "raven.contrib.django.raven_compat",
    "django.contrib.sites",
    "django.contrib.sitemaps",
    "django_recaptcha",
    "django.forms",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "csp.middleware.CSPMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATE_DIR = BASE_DIR / "templates"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATE_DIR, django.__path__[0] + "/forms/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "csp.context_processors.nonce",
            ],
        },
    },
]

FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWD"),
        "PORT": os.getenv("DB_PORT"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
        "TEST": {
            "NAME": "dictation_test_database",
        },
        "OPTIONS": {
            "isolation_level": psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "apps.dictation_auth.authenticate.EmailModelBackend",
    "django.contrib.auth.backends.ModelBackend",
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = os.getenv("STATIC_ROOT")

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_AGE = 86400  # 24h

CSP_DEFAULT_SRC = (
    # "'none'",
    "'self'",
    "region1.google-analytics.com/",
    "https://www.googletagmanager.com/",
    "https://www.googletagmanager.com/gtm.js",
    "https://www.googletagmanager.com/gtag/js",
    "cdn.jsdelivr.net/npm/",
    "cdnjs.cloudflare.com/",
)
CSP_BASE_URI = ("'self'",)
CSP_STYLE_SRC = (
    "'self'",
    "cdn.jsdelivr.net/npm/",
    "cdnjs.cloudflare.com/",
    "fonts.googleapis.com/",
    "https://www.googletagmanager.com/",
    "https://www.googletagmanager.com/gtm.js",
    "https://www.googletagmanager.com/gtag/js",
)

CSP_FONT_SRC = (
    "'self'",
    "https://fonts.gstatic.com/",
    "https://fonts.googleapis.com/",
    "https://cdnjs.cloudflare.com/",
)

CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",
    "'unsafe-eval'",
    "https://www.youtube.com/",
    "cdn.jsdelivr.net/npm/",
    "cdnjs.cloudflare.com/",
    "region1.google-analytics.com/",
    "https://www.googletagmanager.com/",
    "https://www.googletagmanager.com/gtm.js",
    "https://www.googletagmanager.com/gtag/js",
    "https://www.google.com/recaptcha/",
    "https://www.gstatic.com/recaptcha/",
)
CSP_INCLUDE_NONCE_IN = ["script-src"]
CSP_IMG_SRC = (
    "'self'",
    "img.youtube.com",
    "i.ytimg.com/",
    "region1.google-analytics.com/",
    "https://www.googletagmanager.com",
    "data:",
    "blob:",
)
CSP_MEDIA_SRC = ("'self'", "https://www.youtube.com/")
CSP_FRAME_SRC = (
    "'self'",
    "https://www.youtube-nocookie.com/",
    "https://www.youtube.com/embed/",
    "https://www.youtube.com/iframe_api",
    "https://www.googletagmanager.com/",
    "https://googleads.g.doubleclick.net/",
    "https://www.google.com/recaptcha/",
    "https://recaptcha.google.com/recaptcha/",
)
CSP_OBJECT_SRC = ("'none'",)
CSP_FRAME_ANCESTORS = "'self'"

LOGIN_URL = "/auth/accounts/login"

# Custom user
AUTH_USER_MODEL = "dictation_auth.User"

# Redirect to profile URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = "registration/profile.html"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STATIC_DIR = Path("static")
TXT_DIR = STATIC_DIR / "txt"
IMG_DIR = STATIC_DIR / "img"

PONCTUATION = [
    # ".",
    ",",
    ":",
    "!",
    "?",
    ";",
    " - ",
    '"',
    "<",
    ">",
    "/",
    "#",
    "@",
    "$",
    "£",
    "*",
    "¤",
    "|",
    "`",
]
